import {
  View,
  Text,
  StyleSheet,
  ActivityIndicator,
  Image,
  TouchableOpacity,
  Modal,
  PermissionsAndroid,

  Alert,
  FlatList,
  Share,
  BackHandler,
} from "react-native";
import { launchCamera, launchImageLibrary } from "react-native-image-picker";
import React, { useEffect, useRef, useState } from "react";
import { Camera, useCameraDevices } from "react-native-vision-camera";
import { Button, ScreenWrapper } from "~components";
import { height, width } from "~utills/Dimension";
import styles from "./styles";
import { setAppLoader } from "~redux/slices/config";
import { useDispatch } from "react-redux";
import ReactNativeModal from "react-native-modal";
import RNFS from "react-native-fs";
import CameraRoll from "@react-native-community/cameraroll";
import ScreenNames from "~routes/routes";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { SvgXml } from "react-native-svg";
import { useIsFocused } from "@react-navigation/native";
export default function LoginScreen({navigation}) {
  const devices = useCameraDevices("wide-angle-camera");
  const camera = useRef(null);
  const dispatch = useDispatch();
  const [image, setImage] = useState(null);
  const [modal, setmodal] = useState(false);
  const[timer,showTimer]=useState(false)
  const[box,showBox]=useState(false)
  const[count,setcount]=useState(10)
  const [isrecording, setisrecording] = useState(false);
  const [flash, setflash] = useState("off");
  const [toggle, settoggle] = useState(false);
  const [zoom, setzoom] = useState(0);
  const [photos, setphotos] = useState([]);
  const device = toggle ? devices.front: devices.back;
  const [imageRes,setImageRes]=useState(null)
  const [videoRes,setVideoRes]=useState(null)
  const[preview,setpreview]=useState(false)
  const focus=useIsFocused()
 
  useEffect(()=>{
       getSettings()

  },[focus])
  const getSettings=async()=>{
 
    let imageres=JSON.parse(await AsyncStorage.getItem('ImageRes'))
    let videores=JSON.parse(await AsyncStorage.getItem('VideoRes'))
     let preview=JSON.parse(await AsyncStorage.getItem('Preview'))
     setpreview(preview)
     if(preview){
      setTimeout(()=>{
        setpreview(false)
      },3000)
     }
    console.log(imageres,"IMAGERES")
        console.log(videores, "VideoRES");
               console.log(preview, "Preview");

  }
  BackHandler.addEventListener("hardwareBackPress", function () {
   if(modal){
     setphotos([]);
     setmodal(false);
     savePhoto;
   }
  });
  React.useEffect(() => {
    getPermission();
  }, []);
  const getPermission = async () => {
    const newCameraPermission = await Camera.requestCameraPermission();
    const newMicrophonePermission = await Camera.requestMicrophonePermission();
  };
  let i=10;
  const takePhoto = async () => {
    if(timer){
        let interval = setInterval(async() => {
           i--;
          setcount(i)
           if(i===0)
        {
          clearInterval(interval)
          const photo = await camera.current.takePhoto({
            flash: flash,
            
          });
          setImage(photo?.path);
          setmodal(true);
          showTimer(false)

        }
        }, 1000);
       
    }
    else{
    const photo = await camera.current.takePhoto({
      flash: flash,
    });
    setImage(photo?.path);
    setmodal(true);
  }
  };
  const savePhoto = async () => {
    const permission = PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE;

    const hasPermission = await PermissionsAndroid.check(permission);
    if (hasPermission) {
      CameraRoll.save(image);
      setmodal(false);
    } else {
      const status = await PermissionsAndroid.request(permission);
      if (status == "granted") {
        CameraRoll.save(image);
        setmodal(false);
      } else {
        Alert.alert("Permission denied");
      }
    }
  };
  const takeVideo = () => {
    camera.current.startRecording({
      flash: flash,
      onRecordingFinished: (video) => {
        CameraRoll.save(video?.path);
      },
      onRecordingError: (error) => {
        Alert.alert("Video stopped");
      },
    });
  };
  const getPhotos = async () => {
   launchImageLibrary({}, (response) => {
      if (response.didCancel) {
        // user cancel image selection
      } else if (response.error) {
        // error
      } else {
        // her you access the image with response object
        console.log(response);
        setImage(response.assets[0].uri)
        photos.push(1)
        setmodal(true)
        
      }
    });
  };
  const renderPhotos = ({ item, index }) => {
    return (
      <TouchableOpacity
        key={index}
        activeOpacity={0.8}
        style={styles.imageBorder}
      >
        <Image
          style={styles.image}
          source={{ uri: item.node.image.uri }}
          resizeMode="cover"
        />
      </TouchableOpacity>
    );
  };
  if (device == null) return <ActivityIndicator size={10} color="red" />;
  return (
    <>
      <ScreenWrapper hidden={true}>
        <View style={{ flex: 1 }}>
          <Camera
            ref={camera}
            style={StyleSheet.absoluteFill}
            device={device}
            video={false}
            isActive={true}
            enableZoomGesture
            photo={true}
            zoom={zoom}
          />
          {box ? (
            <View
              style={{
                height: height(15),
                width: width(40),
                backgroundColor: "silver",
                borderRadius: width(3),
                position: "absolute",
                justifyContent: "space-between",
                right: width(7),
                bottom: height(14),
                zIndex: 1000000000,
              }}
            >
              <TouchableOpacity
                onPress={() => {
                  showTimer(!timer);
                  showBox(false);
                }}
                style={{
                  height: height(7.5),
                  width: "100%",
                  flexDirection: "row",
                  justifyContent: "flex-start",
                  paddingLeft: width(5),
                  alignItems: "center",
                }}
              >
                <SvgXml
                  xml={`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M21 14C21 18.9706 16.9706 23 12 23C7.02944 23 3 18.9706 3 14C3 9.02944 7.02944 5 12 5C16.9706 5 21 9.02944 21 14ZM12 19C14.7614 19 17 16.7614 17 14C17 11.2386 14.7614 9 12 9C9.23858 9 7 11.2386 7 14C7 16.7614 9.23858 19 12 19ZM12 21C15.866 21 19 17.866 19 14C19 10.134 15.866 7 12 7C8.13401 7 5 10.134 5 14C5 17.866 8.13401 21 12 21ZM13 11C13 10.4477 12.5523 10 12 10C11.4477 10 11 10.4477 11 11V14C11 14.5523 11.4477 15 12 15C12.5523 15 13 14.5523 13 14V11Z" fill="black"/>
<path d="M17.5 7.5L19 6" stroke="black" stroke-width="2" stroke-linecap="round"/>
<path d="M10.0681 2.37059C10.1821 2.26427 10.4332 2.17033 10.7825 2.10332C11.1318 2.03632 11.5597 2 12 2C12.4403 2 12.8682 2.03632 13.2175 2.10332C13.5668 2.17033 13.8179 2.26427 13.9319 2.37059" stroke="black" stroke-width="2" stroke-linecap="round"/>
</svg>
`}
                />
                <Text
                  style={{ color: "#000", marginLeft: width(2), fontSize: 14 }}
                >
                  Self Timer
                </Text>
              </TouchableOpacity>
              <TouchableOpacity
                onPress={() => {
                  navigation.navigate(ScreenNames.HOME);
                  showBox(false);
                }}
                style={{
                  height: height(7.5),
                  width: "100%",
                  flexDirection: "row",
                  alignItems: "flex-start",
                  flexDirection: "row",
                  justifyContent: "flex-start",
                  paddingLeft: width(5),
                  alignItems: "center",
                }}
              >
                <SvgXml
                  xml={`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M14.1361 3.36144L15.1312 3.26194L14.1361 3.36144ZM13.9838 2.54161L13.095 3V3L13.9838 2.54161ZM14.4311 4.81793L15.2261 4.21141L15.2261 4.21141L14.4311 4.81793ZM15.3595 5.20248L15.2261 4.21141L15.3595 5.20248ZM16.5979 4.38113L17.2311 5.15509L17.2311 5.15509L16.5979 4.38113ZM17.2853 3.90918L17.5896 4.86175L17.2853 3.90918ZM17.9872 3.94419L18.3848 3.02663L18.3848 3.02663L17.9872 3.94419ZM18.6243 4.4822L17.9172 5.1893L17.9172 5.18931L18.6243 4.4822ZM19.5178 5.37567L20.2249 4.66856L20.2249 4.66856L19.5178 5.37567ZM20.0558 6.01275L20.9733 5.61517L20.9733 5.61516L20.0558 6.01275ZM20.0908 6.71464L21.0434 7.01895L21.0434 7.01894L20.0908 6.71464ZM19.6188 7.4021L18.8449 6.76886L18.8449 6.76886L19.6188 7.4021ZM18.7975 8.64056L17.8064 8.50724L17.8064 8.50725L18.7975 8.64056ZM19.182 9.56893L18.5755 10.364L18.5755 10.364L19.182 9.56893ZM20.6385 9.86385L20.738 8.86882L20.6385 9.86385ZM21.4584 10.0162L21.9168 9.1275L21.9168 9.1275L21.4584 10.0162ZM21.9299 10.5373L22.8599 10.1696L22.8599 10.1696L21.9299 10.5373ZM21.93 13.4626L21 13.095L21 13.095L21.93 13.4626ZM21.4583 13.9838L21.9166 14.8726L21.9166 14.8726L21.4583 13.9838ZM20.6386 14.1361L20.5391 13.1411L20.5065 13.1444L20.4742 13.1497L20.6386 14.1361ZM20.6386 14.1361L20.7381 15.1312L20.7707 15.1279L20.803 15.1225L20.6386 14.1361ZM19.1825 14.4309L18.5762 13.6357L18.5762 13.6357L19.1825 14.4309ZM18.7979 15.3596L17.8068 15.4931V15.4931L18.7979 15.3596ZM19.619 16.5976L18.845 17.2308H18.845L19.619 16.5976ZM20.0908 17.2848L19.1383 17.5892V17.5892L20.0908 17.2848ZM20.0558 17.9869L19.1383 17.5892L19.1383 17.5892L20.0558 17.9869ZM19.5179 18.6238L20.225 19.3309H20.225L19.5179 18.6238ZM18.6243 19.5174L17.9172 18.8102L17.9172 18.8103L18.6243 19.5174ZM17.9873 20.0554L18.3849 20.9729L18.3849 20.9729L17.9873 20.0554ZM17.2854 20.0904L16.981 21.0429L16.981 21.0429L17.2854 20.0904ZM16.5979 19.6184L17.2312 18.8444L17.2226 18.8376L16.5979 19.6184ZM16.5979 19.6184L15.9646 20.3924L15.9732 20.3993L16.5979 19.6184ZM15.3595 18.7971L15.4928 17.806H15.4928L15.3595 18.7971ZM14.4311 19.1816L15.2262 19.7882L15.2262 19.7881L14.4311 19.1816ZM14.1362 20.6383L13.1411 20.5388V20.5388L14.1362 20.6383ZM13.9837 21.4585L13.095 21L13.095 21L13.9837 21.4585ZM13.4628 21.9299L13.095 21L13.095 21L13.4628 21.9299ZM10.5373 21.9299L10.905 21L10.5373 21.9299ZM10.0162 21.4584L10.905 21H10.905L10.0162 21.4584ZM9.86385 20.6385L8.86882 20.7381V20.7381L9.86385 20.6385ZM9.56892 19.182L8.77387 19.7885L8.77387 19.7885L9.56892 19.182ZM8.64057 18.7975L8.50728 17.8064H8.50727L8.64057 18.7975ZM7.40208 19.6189L6.76884 18.8449L6.753 18.8579L6.73771 18.8714L7.40208 19.6189ZM7.40206 19.6189L8.0353 20.3928L8.05113 20.3799L8.06643 20.3663L7.40206 19.6189ZM6.71458 20.0908L7.01887 21.0434H7.01887L6.71458 20.0908ZM6.01272 20.0558L5.61515 20.9734H5.61515L6.01272 20.0558ZM5.37561 19.5178L6.08271 18.8107H6.08271L5.37561 19.5178ZM4.48217 18.6243L3.77506 19.3315L3.77506 19.3315L4.48217 18.6243ZM3.94414 17.9873L4.86171 17.5897L4.86171 17.5897L3.94414 17.9873ZM3.90913 17.2854L4.86171 17.5897L4.86171 17.5897L3.90913 17.2854ZM4.3811 16.5979L5.15506 17.2311H5.15506L4.3811 16.5979ZM5.20247 15.3594L6.19355 15.4928L5.20247 15.3594ZM4.81792 14.4311L5.42445 13.636L5.42445 13.636L4.81792 14.4311ZM3.36143 14.1361L3.26193 15.1312H3.26193L3.36143 14.1361ZM2.54161 13.9838L3 13.095H3L2.54161 13.9838ZM2.07005 13.4627L1.14009 13.8304L1.14009 13.8304L2.07005 13.4627ZM2.07008 10.5372L1.14017 10.1694L1.14017 10.1694L2.07008 10.5372ZM2.54152 10.0163L2.08305 9.12757L2.08305 9.12757L2.54152 10.0163ZM3.36155 9.86384V8.86384H3.31167L3.26205 8.86881L3.36155 9.86384ZM3.36156 9.86384V10.8638H3.41143L3.46106 10.8589L3.36156 9.86384ZM4.81842 9.56881L4.21178 8.77383L4.21177 8.77383L4.81842 9.56881ZM5.20287 8.64066L6.19396 8.50749L6.19396 8.50749L5.20287 8.64066ZM4.38128 7.40182L5.15523 6.76858H5.15523L4.38128 7.40182ZM3.90914 6.71405L4.86175 6.40988L4.86175 6.40988L3.90914 6.71405ZM3.94413 6.01243L3.02651 5.61498L3.02651 5.61498L3.94413 6.01243ZM4.48233 5.37509L5.18944 6.0822H5.18944L4.48233 5.37509ZM5.37565 4.48177L4.66855 3.77466V3.77466L5.37565 4.48177ZM6.01277 3.94373L5.6152 3.02615L5.6152 3.02616L6.01277 3.94373ZM6.71463 3.90872L7.01892 2.95614V2.95614L6.71463 3.90872ZM7.4022 4.38076L8.03543 3.60681V3.60681L7.4022 4.38076ZM8.64044 5.20207L8.77391 4.21101L8.64044 5.20207ZM9.56907 4.81742L8.77391 4.21101L8.77391 4.21101L9.56907 4.81742ZM9.86387 3.36131L10.8589 3.46081V3.46081L9.86387 3.36131ZM10.0162 2.5417L9.12739 2.08341L9.12739 2.08341L10.0162 2.5417ZM10.5374 2.07001L10.905 3L10.905 3L10.5374 2.07001ZM13.4627 2.07005L13.8304 1.1401V1.1401L13.4627 2.07005ZM15.1312 3.26194C15.1108 3.05831 15.0912 2.85693 15.0626 2.6868C15.0324 2.50684 14.9828 2.29705 14.8725 2.08322L13.095 3C13.0721 2.95549 13.0769 2.93878 13.0902 3.01798C13.1052 3.10701 13.1181 3.23089 13.1411 3.46094L15.1312 3.26194ZM15.2261 4.21141C15.2894 4.29433 15.2693 4.33101 15.2342 4.13595C15.2008 3.95045 15.1739 3.68915 15.1312 3.26194L13.1411 3.46094C13.1805 3.85459 13.2152 4.20895 13.2658 4.49017C13.3147 4.76184 13.4009 5.11633 13.636 5.42445L15.2261 4.21141ZM15.2261 4.21141L15.2261 4.21141L13.636 5.42444C14.0718 5.99575 14.7806 6.28935 15.4928 6.19355L15.2261 4.21141ZM15.9646 3.60717C15.6323 3.87905 15.4286 4.04481 15.2738 4.15238C15.1111 4.26548 15.1228 4.22531 15.2261 4.21141L15.4928 6.19355C15.8768 6.14188 16.1885 5.95223 16.4152 5.7947C16.6498 5.63163 16.9249 5.4056 17.2311 5.15509L15.9646 3.60717ZM16.981 2.95661C16.7518 3.02983 16.5684 3.14308 16.4198 3.24897C16.2793 3.34907 16.123 3.47759 15.9646 3.60717L17.2311 5.15509C17.41 5.00869 17.5068 4.93022 17.5803 4.87784C17.6457 4.83124 17.6373 4.84651 17.5896 4.86175L16.981 2.95661ZM18.3848 3.02663C17.9408 2.83421 17.442 2.80934 16.981 2.95661L17.5896 4.86175L17.5896 4.86175L18.3848 3.02663ZM19.3314 3.77509C19.1867 3.6304 19.044 3.48696 18.9142 3.37338C18.7768 3.25323 18.6056 3.12228 18.3848 3.02663L17.5896 4.86175C17.5437 4.84184 17.5369 4.82581 17.5973 4.87869C17.6653 4.93813 17.7537 5.02583 17.9172 5.1893L19.3314 3.77509ZM20.2249 4.66856L19.3314 3.77509L17.9172 5.18931L18.8107 6.08277L20.2249 4.66856ZM20.9733 5.61516C20.8777 5.39441 20.7467 5.22316 20.6266 5.08581C20.513 4.95597 20.3696 4.81326 20.2249 4.66856L18.8106 6.08277C18.9741 6.24626 19.0618 6.33469 19.1213 6.40264C19.1742 6.46308 19.1581 6.45629 19.1382 6.41034L20.9733 5.61516ZM21.0434 7.01894C21.1906 6.55797 21.1658 6.05922 20.9733 5.61517L19.1382 6.41034L19.1382 6.41034L21.0434 7.01894ZM20.3928 8.03534C20.5224 7.87696 20.6509 7.72069 20.751 7.58019C20.8569 7.43156 20.9701 7.24814 21.0434 7.01895L19.1382 6.41033C19.1535 6.36263 19.1687 6.35427 19.1221 6.41968C19.0697 6.4932 18.9913 6.58992 18.8449 6.76886L20.3928 8.03534ZM19.7885 8.77387C19.7746 8.87723 19.7345 8.88894 19.8476 8.72619C19.9551 8.57141 20.1209 8.36764 20.3928 8.03534L18.8449 6.76886C18.5943 7.07506 18.3683 7.35016 18.2052 7.58481C18.0477 7.81148 17.8581 8.12317 17.8064 8.50724L19.7885 8.77387ZM19.7885 8.77387V8.77386L17.8064 8.50725C17.7106 9.21938 18.0042 9.92816 18.5755 10.364L19.7885 8.77387ZM20.738 8.86882C20.3108 8.82609 20.0495 8.79922 19.864 8.76584C19.6689 8.73073 19.7056 8.7106 19.7885 8.77387L18.5755 10.364C18.8836 10.599 19.2381 10.6853 19.5098 10.7342C19.791 10.7848 20.1454 10.8195 20.539 10.8589L20.738 8.86882ZM21.9168 9.1275C21.703 9.01721 21.4932 8.96759 21.3132 8.93737C21.1431 8.9088 20.9417 8.88918 20.738 8.86882L20.539 10.8589C20.7691 10.8819 20.893 10.8948 20.982 10.9098C21.0612 10.9231 21.0445 10.9279 21 10.905L21.9168 9.1275ZM22.8599 10.1696C22.682 9.71957 22.3469 9.34933 21.9168 9.1275L21 10.905L21 10.905L22.8599 10.1696ZM23 11.3682C23 11.1636 23.0005 10.9613 22.989 10.7891C22.9769 10.607 22.9484 10.3933 22.8599 10.1696L21 10.905C20.9816 10.8584 20.9881 10.8423 20.9935 10.9224C20.9995 11.0125 21 11.137 21 11.3682H23ZM23 12.6319V11.3682H21V12.6319H23ZM22.86 13.8302C22.9484 13.6065 22.9769 13.3929 22.989 13.2108C23.0005 13.0388 23 12.8365 23 12.6319H21C21 12.863 20.9995 12.9875 20.9935 13.0776C20.9881 13.1577 20.9816 13.1416 21 13.095L22.86 13.8302ZM21.9166 14.8726C22.3469 14.6507 22.682 14.2804 22.86 13.8302L21 13.095V13.095L21.9166 14.8726ZM20.7381 15.1312C20.9417 15.1108 21.1431 15.0912 21.3132 15.0626C21.4931 15.0324 21.7028 14.9828 21.9166 14.8726L21 13.095C21.0445 13.0721 21.0612 13.077 20.982 13.0902C20.893 13.1052 20.7691 13.1181 20.5391 13.1411L20.7381 15.1312ZM20.803 15.1225L20.803 15.1225L20.4742 13.1497L20.4742 13.1497L20.803 15.1225ZM19.7889 15.2261C19.706 15.2893 19.6693 15.2692 19.8644 15.2341C20.0498 15.2007 20.311 15.1739 20.7381 15.1312L20.5391 13.1411C20.1456 13.1805 19.7913 13.2151 19.5102 13.2657C19.2386 13.3146 18.8842 13.4008 18.5762 13.6357L19.7889 15.2261ZM19.7889 15.2261L19.7889 15.2261L18.5762 13.6357C18.0046 14.0716 17.7108 14.7807 17.8068 15.4931L19.7889 15.2261ZM20.3929 15.9643C20.1212 15.6322 19.9555 15.4285 19.8479 15.2738C19.7348 15.1111 19.775 15.1228 19.7889 15.2261L17.8068 15.4931C17.8585 15.877 18.0481 16.1886 18.2056 16.4152C18.3686 16.6497 18.5946 16.9247 18.845 17.2308L20.3929 15.9643ZM21.0433 16.9803C20.9701 16.7513 20.8569 16.5679 20.751 16.4193C20.651 16.2789 20.5225 16.1227 20.3929 15.9643L18.845 17.2308C18.9914 17.4097 19.0698 17.5064 19.1222 17.5799C19.1688 17.6453 19.1535 17.6369 19.1383 17.5892L21.0433 16.9803ZM20.9733 18.3846C21.1658 17.9404 21.1907 17.4415 21.0433 16.9803L19.1383 17.5892L19.1383 17.5892L20.9733 18.3846ZM20.225 19.3309C20.3697 19.1862 20.5131 19.0436 20.6266 18.9138C20.7467 18.7765 20.8776 18.6053 20.9733 18.3846L19.1383 17.5892C19.1582 17.5433 19.1742 17.5365 19.1213 17.5969C19.0619 17.6648 18.9742 17.7532 18.8108 17.9167L20.225 19.3309ZM19.3314 20.2245L20.225 19.3309L18.8108 17.9167L17.9172 18.8102L19.3314 20.2245ZM18.3849 20.9729C18.6056 20.8773 18.7769 20.7463 18.9142 20.6262C19.044 20.5126 19.1867 20.3692 19.3314 20.2245L17.9172 18.8103C17.7537 18.9737 17.6653 19.0614 17.5974 19.1209C17.5369 19.1737 17.5437 19.1577 17.5897 19.1378L18.3849 20.9729ZM16.981 21.0429C17.442 21.1902 17.9408 21.1653 18.3849 20.9729L17.5897 19.1378H17.5897L16.981 21.0429ZM15.9647 20.3924C16.1231 20.522 16.2793 20.6505 16.4198 20.7506C16.5684 20.8565 16.7519 20.9697 16.981 21.0429L17.5897 19.1378C17.6374 19.153 17.6457 19.1683 17.5803 19.1217C17.5068 19.0693 17.4101 18.9909 17.2312 18.8445L15.9647 20.3924ZM15.9732 20.3993L15.9732 20.3993L17.2226 18.8376L17.2226 18.8375L15.9732 20.3993ZM15.2262 19.7881C15.1228 19.7742 15.1111 19.7341 15.2738 19.8472C15.4286 19.9547 15.6324 20.1205 15.9647 20.3924L17.2311 18.8445C16.925 18.5939 16.6499 18.3679 16.4152 18.2048C16.1886 18.0473 15.8769 17.8577 15.4928 17.806L15.2262 19.7881ZM15.2262 19.7881H15.2262L15.4928 17.806C14.7807 17.7102 14.0719 18.0038 13.636 18.5751L15.2262 19.7881ZM15.1312 20.7378C15.1739 20.3105 15.2008 20.0492 15.2342 19.8636C15.2693 19.6685 15.2894 19.7052 15.2262 19.7882L13.636 18.5751C13.401 18.8832 13.3147 19.2378 13.2658 19.5094C13.2152 19.7907 13.1805 20.1451 13.1411 20.5388L15.1312 20.7378ZM14.8724 21.917C14.9828 21.7031 15.0324 21.4932 15.0626 21.3132C15.0912 21.143 15.1108 20.9415 15.1312 20.7378L13.1411 20.5388C13.1181 20.769 13.1052 20.8929 13.0902 20.982C13.0769 21.0612 13.072 21.0445 13.095 21L14.8724 21.917ZM13.8306 22.8598C14.2805 22.6819 14.6506 22.3469 14.8724 21.917L13.095 21L13.095 21L13.8306 22.8598ZM12.6316 23C12.8363 23 13.0387 23.0005 13.2109 22.989C13.393 22.9768 13.6068 22.9483 13.8306 22.8598L13.095 21C13.1416 20.9816 13.1577 20.9881 13.0776 20.9935C12.9875 20.9995 12.8629 21 12.6316 21V23ZM11.3682 23H12.6316V21H11.3682V23ZM10.1696 22.8599C10.3933 22.9484 10.607 22.9769 10.7891 22.989C10.9613 23.0005 11.1636 23 11.3682 23V21C11.137 21 11.0125 20.9995 10.9224 20.9935C10.8423 20.9881 10.8584 20.9816 10.905 21L10.1696 22.8599ZM9.1275 21.9168C9.34933 22.3469 9.71958 22.682 10.1696 22.8599L10.905 21L9.1275 21.9168ZM8.86882 20.7381C8.88918 20.9417 8.9088 21.1431 8.93737 21.3132C8.96759 21.4932 9.01721 21.703 9.1275 21.9168L10.905 21C10.9279 21.0445 10.9231 21.0612 10.9098 20.982C10.8948 20.893 10.8819 20.7691 10.8589 20.539L8.86882 20.7381ZM8.77387 19.7885C8.7106 19.7056 8.73073 19.6689 8.76584 19.864C8.79922 20.0495 8.82609 20.3108 8.86882 20.7381L10.8589 20.539C10.8195 20.1454 10.7848 19.791 10.7342 19.5098C10.6853 19.2381 10.599 18.8836 10.364 18.5755L8.77387 19.7885ZM8.77387 19.7885L10.364 18.5755C9.92815 18.0042 9.21939 17.7106 8.50728 17.8064L8.77387 19.7885ZM8.03531 20.3928C8.36763 20.1209 8.5714 19.9551 8.72619 19.8476C8.88895 19.7345 8.87724 19.7746 8.77387 19.7885L8.50727 17.8064C8.12318 17.858 7.81149 18.0477 7.58481 18.2052C7.35015 18.3683 7.07504 18.5944 6.76884 18.8449L8.03531 20.3928ZM8.06643 20.3663L8.06644 20.3663L6.73771 18.8714L6.7377 18.8715L8.06643 20.3663ZM7.01887 21.0434C7.24807 20.9702 7.4315 20.8569 7.58013 20.751C7.72064 20.6509 7.87691 20.5224 8.0353 20.3928L6.76883 18.8449C6.58988 18.9913 6.49316 19.0698 6.41963 19.1222C6.35422 19.1688 6.36258 19.1535 6.41029 19.1383L7.01887 21.0434ZM5.61515 20.9734C6.05919 21.1658 6.55791 21.1907 7.01887 21.0434L6.41029 19.1383L6.41029 19.1383L5.61515 20.9734ZM4.6685 20.2249C4.81321 20.3696 4.95592 20.513 5.08577 20.6266C5.22313 20.7468 5.39438 20.8777 5.61515 20.9734L6.41029 19.1383C6.45624 19.1582 6.46304 19.1742 6.40259 19.1213C6.33464 19.0619 6.2462 18.9742 6.08271 18.8107L4.6685 20.2249ZM3.77506 19.3315L4.6685 20.2249L6.08271 18.8107L5.18927 17.9172L3.77506 19.3315ZM3.02657 18.3848C3.12223 18.6056 3.25318 18.7768 3.37333 18.9142C3.48692 19.044 3.63036 19.1868 3.77506 19.3315L5.18928 17.9172C5.02579 17.7538 4.93809 17.6653 4.87864 17.5974C4.82577 17.5369 4.8418 17.5437 4.86171 17.5897L3.02657 18.3848ZM2.95656 16.9811C2.8093 17.4421 2.83417 17.9408 3.02657 18.3848L4.86171 17.5897V17.5897L2.95656 16.9811ZM3.60715 15.9647C3.47756 16.123 3.34903 16.2793 3.24892 16.4198C3.14303 16.5684 3.02977 16.7519 2.95656 16.9811L4.86171 17.5897C4.84647 17.6374 4.83119 17.6457 4.87779 17.5803C4.93018 17.5068 5.00865 17.4101 5.15506 17.2311L3.60715 15.9647ZM4.2114 15.2261C4.2253 15.1228 4.26548 15.1111 4.15237 15.2738C4.0448 15.4286 3.87903 15.6324 3.60715 15.9647L5.15506 17.2311C5.40558 16.9249 5.63162 16.6498 5.79469 16.4152C5.95222 16.1885 6.14188 15.8768 6.19355 15.4928L4.2114 15.2261ZM4.2114 15.2261L4.2114 15.2261L6.19355 15.4928C6.28934 14.7806 5.99575 14.0718 5.42445 13.636L4.2114 15.2261ZM3.26193 15.1312C3.68915 15.1739 3.95044 15.2008 4.13595 15.2342C4.33101 15.2693 4.29432 15.2894 4.2114 15.2261L5.42445 13.636C5.11633 13.4009 4.76184 13.3147 4.49017 13.2658C4.20894 13.2152 3.85458 13.1805 3.46093 13.1411L3.26193 15.1312ZM2.08323 14.8725C2.29705 14.9828 2.50683 15.0324 2.6868 15.0626C2.85693 15.0912 3.05831 15.1108 3.26193 15.1312L3.46094 13.1411C3.23089 13.1181 3.10701 13.1052 3.01798 13.0902C2.93878 13.0769 2.95549 13.0721 3 13.095L2.08323 14.8725ZM1.14009 13.8304C1.31803 14.2804 1.65311 14.6507 2.08323 14.8725L3 13.095H3L1.14009 13.8304ZM1 12.6318C1 12.8364 0.999483 13.0387 1.01098 13.2109C1.02314 13.393 1.05163 13.6066 1.14009 13.8304L3 13.095C3.01841 13.1416 3.01188 13.1577 3.00653 13.0776C3.00052 12.9875 3 12.863 3 12.6318H1ZM1 11.3683V12.6318H3V11.3683H1ZM1.14017 10.1694C1.05166 10.3932 1.02315 10.607 1.01098 10.7891C0.999483 10.9613 1 11.1637 1 11.3683H3C3 11.1371 3.00052 11.0125 3.00654 10.9224C3.01189 10.8423 3.01842 10.8584 3 10.905L1.14017 10.1694ZM2.08305 9.12757C1.65308 9.34939 1.3181 9.71954 1.14017 10.1694L3 10.905L3 10.905L2.08305 9.12757ZM3.26205 8.86881C3.05837 8.88917 2.85694 8.9088 2.68677 8.93737C2.50676 8.9676 2.29692 9.01724 2.08305 9.12757L3 10.905C2.95548 10.928 2.93877 10.9231 3.01798 10.9098C3.10704 10.8948 3.23094 10.8819 3.46105 10.8589L3.26205 8.86881ZM3.36155 8.86384H3.36155V10.8638H3.36155V8.86384ZM3.36156 8.86384H3.36155V10.8638H3.36156V8.86384ZM4.21177 8.77383C4.29471 8.71055 4.33141 8.73069 4.1363 8.7658C3.95075 8.7992 3.68939 8.82607 3.26205 8.86881L3.46106 10.8589C3.85482 10.8195 4.20927 10.7848 4.49056 10.7342C4.76231 10.6853 5.1169 10.5989 5.42506 10.3638L4.21177 8.77383ZM4.21177 8.77383L4.21178 8.77383L5.42506 10.3638C5.99613 9.92801 6.28962 9.21944 6.19396 8.50749L4.21177 8.77383ZM3.60732 8.03506C3.87929 8.36746 4.04511 8.5713 4.15272 8.72614C4.26586 8.88895 4.22567 8.87724 4.21177 8.77383L6.19396 8.50749C6.14234 8.1233 5.95263 7.81151 5.79506 7.58478C5.63195 7.35006 5.40584 7.07487 5.15523 6.76858L3.60732 8.03506ZM2.95652 7.01822C3.02973 7.24751 3.14303 7.43102 3.24896 7.5797C3.3491 7.72027 3.47768 7.8766 3.60732 8.03506L5.15523 6.76858C5.00876 6.58956 4.93026 6.49279 4.87785 6.41923C4.83123 6.35379 4.84651 6.36215 4.86175 6.40988L2.95652 7.01822ZM3.02651 5.61498C2.83424 6.05887 2.80938 6.5574 2.95652 7.01822L4.86175 6.40988L3.02651 5.61498ZM3.77523 4.66798C3.63047 4.81274 3.48698 4.9555 3.37335 5.08539C3.25316 5.2228 3.12217 5.39412 3.02651 5.61498L4.86175 6.40988C4.84184 6.45585 4.8258 6.46265 4.8787 6.40219C4.93816 6.33421 5.02589 6.24574 5.18944 6.0822L3.77523 4.66798ZM4.66855 3.77466L3.77523 4.66798L5.18944 6.0822L6.08276 5.18888L4.66855 3.77466ZM4.66855 3.77466L4.66855 3.77466L6.08276 5.18888L6.08276 5.18887L4.66855 3.77466ZM5.6152 3.02616C5.39443 3.12181 5.22317 3.25276 5.08582 3.37292C4.95597 3.48651 4.81325 3.62995 4.66855 3.77466L6.08276 5.18887C6.24625 5.02538 6.33469 4.93768 6.40264 4.87824C6.46309 4.82536 6.45629 4.84139 6.41034 4.8613L5.6152 3.02616ZM7.01892 2.95614C6.55795 2.80889 6.05923 2.83377 5.6152 3.02615L6.41033 4.8613H6.41034L7.01892 2.95614ZM8.03543 3.60681C7.87702 3.47719 7.72073 3.34865 7.58021 3.24853C7.43158 3.14264 7.24813 3.02936 7.01892 2.95614L6.41034 4.8613C6.36262 4.84606 6.35426 4.83078 6.41969 4.8774C6.49324 4.9298 6.58999 5.00829 6.76896 5.15472L8.03543 3.60681ZM8.77391 4.21101C8.87727 4.22493 8.88897 4.26509 8.72621 4.15198C8.57144 4.04441 8.36769 3.87865 8.03543 3.60681L6.76896 5.15472C7.07512 5.40521 7.35018 5.63122 7.58477 5.79427C7.81138 5.95176 8.123 6.14141 8.50697 6.19312L8.77391 4.21101ZM8.77391 4.21101L8.77391 4.21101L8.50697 6.19312C9.21932 6.28905 9.92836 5.99536 10.3642 5.42382L8.77391 4.21101ZM8.86883 3.2618C8.82612 3.6889 8.79926 3.95012 8.76589 4.13558C8.7308 4.33059 8.71068 4.29392 8.77391 4.21101L10.3642 5.42382C10.5992 5.11576 10.6854 4.76136 10.7343 4.48976C10.7849 4.20861 10.8196 3.85435 10.8589 3.46081L8.86883 3.2618ZM9.12739 2.08341C9.01716 2.29719 8.96756 2.50692 8.93736 2.68683C8.9088 2.85692 8.88919 3.05824 8.86883 3.2618L10.8589 3.46081C10.8819 3.23082 10.8948 3.10698 10.9098 3.01798C10.923 2.9388 10.9279 2.9555 10.905 3L9.12739 2.08341ZM10.1698 1.14002C9.71962 1.31796 9.34924 1.65315 9.12739 2.08341L10.905 3L10.905 3L10.1698 1.14002ZM11.3681 1C11.1635 1 10.9612 0.999483 10.7892 1.01097C10.6071 1.02313 10.3935 1.05161 10.1698 1.14002L10.905 3C10.8584 3.0184 10.8423 3.01188 10.9224 3.00653C11.0125 3.00052 11.137 3 11.3681 3V1ZM12.6318 1H11.3681V3H12.6318V1ZM13.8304 1.1401C13.6066 1.05163 13.393 1.02314 13.2109 1.01098C13.0387 0.999483 12.8364 1 12.6318 1V3C12.863 3 12.9875 3.00052 13.0776 3.00653C13.1577 3.01188 13.1416 3.01841 13.095 3L13.8304 1.1401ZM14.8725 2.08322C14.6507 1.65312 14.2804 1.31803 13.8304 1.1401L13.095 3L13.095 3L14.8725 2.08322ZM15 12C15 13.6569 13.6569 15 12 15V17C14.7614 17 17 14.7614 17 12H15ZM12 9C13.6569 9 15 10.3431 15 12H17C17 9.23858 14.7614 7 12 7V9ZM9 12C9 10.3431 10.3431 9 12 9V7C9.23858 7 7 9.23858 7 12H9ZM12 15C10.3431 15 9 13.6569 9 12H7C7 14.7614 9.23858 17 12 17V15Z" fill="black"/>
</svg>
`}
                />
                <Text
                  style={{ color: "#000", marginLeft: width(2), fontSize: 14 }}
                >
                  Settings
                </Text>
              </TouchableOpacity>
            </View>
          ) : null}
          {isrecording && (
            <View
              style={{
                position: "absolute",
                top: height(5),
                alignSelf: "center",
              }}
            >
              <View style={{ flexDirection: "row", alignItems: "center" }}>
                <SvgXml
                  xml={`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_195_571)">
<g filter="url(#filter0_d_195_571)">
<path fill-rule="evenodd" clip-rule="evenodd" d="M14.2313 11.1752C13.6429 11.5716 13.6429 12.4376 14.2313 12.834L16 14.0253V9.98387L14.2313 11.1752ZM18 8.63672V15.3725L20.4414 17.0169C21.1056 17.4643 22 16.9884 22 16.1875V7.8217C22 7.02084 21.1056 6.5449 20.4414 6.99231L18 8.63672Z" fill="red"/>
</g>
<g filter="url(#filter1_d_195_571)">
<rect x="2" y="6" width="14" height="12" rx="2" fill="red"/>
</g>
</g>
<defs>
<filter id="filter0_d_195_571" x="9.79001" y="2.82001" width="16.21" height="18.3692" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset/>
<feGaussianBlur stdDeviation="2"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_195_571"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_195_571" result="shape"/>
</filter>
<filter id="filter1_d_195_571" x="-2" y="2" width="22" height="20" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset/>
<feGaussianBlur stdDeviation="2"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_195_571"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_195_571" result="shape"/>
</filter>
<clipPath id="clip0_195_571">
<rect width="24" height="24" fill="red"/>
</clipPath>
</defs>
</svg>
`}
                />
                <Text
                  style={{ color: "red", fontSize: 17, marginLeft: width(3) }}
                >
                  Recording
                </Text>
              </View>
            </View>
          )}
          {timer && (
            <View
              style={{
                position: "absolute",
                top: height(5),
                alignSelf: "center",
              }}
            >
              <View style={{ flexDirection: "row", alignItems: "center" }}>
                <SvgXml
                  xml={`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M21 14C21 18.9706 16.9706 23 12 23C7.02944 23 3 18.9706 3 14C3 9.02944 7.02944 5 12 5C16.9706 5 21 9.02944 21 14ZM12 19C14.7614 19 17 16.7614 17 14C17 11.2386 14.7614 9 12 9C9.23858 9 7 11.2386 7 14C7 16.7614 9.23858 19 12 19ZM12 21C15.866 21 19 17.866 19 14C19 10.134 15.866 7 12 7C8.13401 7 5 10.134 5 14C5 17.866 8.13401 21 12 21ZM13 11C13 10.4477 12.5523 10 12 10C11.4477 10 11 10.4477 11 11V14C11 14.5523 11.4477 15 12 15C12.5523 15 13 14.5523 13 14V11Z" fill="#FE0000"/>
<path d="M17.5 7.5L19 6" stroke="#FE0000" stroke-width="2" stroke-linecap="round"/>
<path d="M10.0681 2.37059C10.1821 2.26427 10.4332 2.17033 10.7825 2.10332C11.1318 2.03632 11.5597 2 12 2C12.4403 2 12.8682 2.03632 13.2175 2.10332C13.5668 2.17033 13.8179 2.26427 13.9319 2.37059" stroke="#FE0000" stroke-width="2" stroke-linecap="round"/>
</svg>

`}
                />
                <Text
                  style={{ color: "red", fontSize: 17, marginLeft: width(3) }}
                >
                  {count} Seconds
                </Text>
              </View>
            </View>
          )}

          <View
            style={{
              position: "absolute",
              zIndex: 1,
              bottom: height(2),
              alignSelf: "center",
              height: width(49),
              width: width(49),
              borderRadius: width(50),

              alignItems: "center",
              justifyContent: "center",
            }}
          >
            <TouchableOpacity
              disabled={timer && isrecording}
              onPress={() => {
                settoggle(!toggle);
              }}
              style={styles.rotate}
            >
              <SvgXml
                xml={`<svg width="29" height="24" viewBox="0 0 29 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_d_307_278)">
<path d="M17 15L17.7071 14.2929L18.4142 15L17.7071 15.7071L17 15ZM13.7071 10.2929L17.7071 14.2929L16.2929 15.7071L12.2929 11.7071L13.7071 10.2929ZM17.7071 15.7071L13.7071 19.7071L12.2929 18.2929L16.2929 14.2929L17.7071 15.7071Z" fill="white"/>
<path d="M12.6706 6.15333C10.5616 6.4359 8.72985 7.09219 7.51677 7.99993C6.3037 8.90768 5.792 10.005 6.077 11.0874C6.362 12.1698 7.42426 13.1634 9.06589 13.8833C10.7075 14.6031 12.8165 15 15 15" stroke="white" stroke-width="2" stroke-linecap="round"/>
<path d="M22.7942 12.75C23.3852 12.2382 23.7687 11.6733 23.923 11.0874C24.0773 10.5015 23.9992 9.90613 23.6933 9.33531C23.3874 8.7645 22.8597 8.2294 22.1402 7.76057C21.4207 7.29174 20.5236 6.89836 19.5 6.60289" stroke="white" stroke-width="2" stroke-linecap="round"/>
</g>
<defs>
<filter id="filter0_d_307_278" x="-1" y="-4" width="32" height="32" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset/>
<feGaussianBlur stdDeviation="2"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_307_278"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_307_278" result="shape"/>
</filter>
</defs>
</svg>
`}
              />
            </TouchableOpacity>
            <TouchableOpacity
              disabled={timer && isrecording}
              onPress={() => {
                if (flash == "off") {
                  setflash("on");
                } else if (flash == "on") {
                  setflash("auto");
                } else {
                  setflash("off");
                }
              }}
              style={styles.flash}
            >
              {flash == "off" ? (
                <SvgXml
                  style={{ marginTop: height(1) }}
                  xml={`<svg width="17" height="19" viewBox="0 0 17 19" fill="none" xmlns="http://www.w3.org/2000/svg">
<line x1="0.854427" y1="1.49378" x2="15.8544" y2="16.4938" stroke="white" stroke-width="1.5"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M6.12983 11.8L7.49997 11.8C7.73567 11.8 7.85352 11.8 7.92675 11.8732C7.99997 11.9464 7.99997 12.0643 7.99997 12.3L7.99997 16.7299C7.99997 17.6205 7.99997 18.0659 8.1962 18.1091C8.39242 18.1523 8.57952 17.7482 8.9537 16.9399L10.3734 13.8734L4.67719 8.1772L4.3149 8.95974C3.72318 10.2379 3.42732 10.8769 3.72225 11.3385C4.01718 11.8 4.7214 11.8 6.12983 11.8ZM5.34849 6.72719L7.04624 3.06006L7.04624 3.06005C7.42043 2.25181 7.60752 1.84769 7.80375 1.89091C7.99997 1.93413 7.99997 2.37946 7.99997 3.27012L7.99997 7.69999C7.99997 7.9357 7.99997 8.05355 8.07319 8.12677C8.14642 8.19999 8.26427 8.19999 8.49997 8.19999L9.87011 8.19999C11.2785 8.19999 11.9828 8.19999 12.2777 8.66153C12.5726 9.12307 12.2768 9.76213 11.685 11.0402L11.0447 12.4234L5.34849 6.72719Z" fill="white"/>
</svg>

`}
                />
              ) : flash == "on" ? (
                <SvgXml
                  style={{ marginTop: height(1) }}
                  xml={`<svg width="10" height="18" viewBox="0 0 10 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4.5 10.8H3.12986C1.72143 10.8 1.01721 10.8 0.72228 10.3385C0.427353 9.87692 0.723212 9.23786 1.31493 7.95975L4.04627 2.06006C4.42045 1.25182 4.60755 0.847696 4.80377 0.890915C5 0.934134 5 1.37946 5 2.27013V6.7C5 6.9357 5 7.05355 5.07322 7.12678C5.14645 7.2 5.2643 7.2 5.5 7.2H6.87014C8.27857 7.2 8.98279 7.2 9.27772 7.66154C9.57265 8.12308 9.27679 8.76214 8.68507 10.0402L5.95373 15.9399C5.57955 16.7482 5.39245 17.1523 5.19623 17.1091C5 17.0659 5 16.6205 5 15.7299V11.3C5 11.0643 5 10.9464 4.92678 10.8732C4.85355 10.8 4.7357 10.8 4.5 10.8Z" fill="white"/>
</svg>
`}
                />
              ) : (
                <SvgXml
                  style={{ marginTop: height(1) }}
                  xml={`<svg width="25" height="28" viewBox="0 0 25 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_d_169_260)">
<path d="M11.5 16.8L10.1299 16.8C8.72143 16.8 8.01721 16.8 7.72228 16.3385C7.42735 15.8769 7.72321 15.2379 8.31493 13.9597L11.0463 8.06006C11.4205 7.25182 11.6075 6.8477 11.8038 6.89091C12 6.93413 12 7.37946 12 8.27013L12 12.7C12 12.9357 12 13.0536 12.0732 13.1268C12.1464 13.2 12.2643 13.2 12.5 13.2L13.8701 13.2C15.2786 13.2 15.9828 13.2 16.2777 13.6615C16.5726 14.1231 16.2768 14.7621 15.6851 16.0402L12.9537 21.9399C12.5795 22.7482 12.3925 23.1523 12.1962 23.1091C12 23.0659 12 22.6205 12 21.7299L12 17.3C12 17.0643 12 16.9464 11.9268 16.8732C11.8536 16.8 11.7357 16.8 11.5 16.8Z" fill="white"/>
<path d="M17.0254 6.10645L15.0918 12L13.5342 12L16.1758 4.89063L17.167 4.89063L17.0254 6.10645ZM18.6318 12L16.6934 6.10645L16.5371 4.89063L17.5381 4.89063L20.1943 12L18.6318 12ZM18.5439 9.35352L18.5439 10.501L14.7891 10.501L14.7891 9.35352L18.5439 9.35352Z" fill="white"/>
</g>
<defs>
<filter id="filter0_d_169_260" x="-4" y="-1" width="32" height="32" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset/>
<feGaussianBlur stdDeviation="2"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_169_260"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_169_260" result="shape"/>
</filter>
</defs>
</svg>
`}
                />
              )}
            </TouchableOpacity>
            <TouchableOpacity
              disabled={timer}
              onPress={() => {
                setzoom(zoom + 1.5);
              }}
              style={styles.zoomin}
            >
              <SvgXml
                xml={`<svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_d_195_498)">
<path d="M19 12C19 12.9193 18.8189 13.8295 18.4672 14.6788C18.1154 15.5281 17.5998 16.2997 16.9497 16.9497C16.2997 17.5998 15.5281 18.1154 14.6788 18.4672C13.8295 18.8189 12.9193 19 12 19C11.0807 19 10.1705 18.8189 9.32122 18.4672C8.47194 18.1154 7.70026 17.5998 7.05025 16.9497C6.40024 16.2997 5.88463 15.5281 5.53284 14.6788C5.18106 13.8295 5 12.9193 5 12C5 11.0807 5.18106 10.1705 5.53284 9.32122C5.88463 8.47194 6.40024 7.70026 7.05025 7.05025C7.70026 6.40024 8.47194 5.88463 9.32122 5.53284C10.1705 5.18106 11.0807 5 12 5C12.9193 5 13.8295 5.18106 14.6788 5.53284C15.5281 5.88463 16.2997 6.40024 16.9497 7.05025C17.5998 7.70026 18.1154 8.47194 18.4672 9.32122C18.8189 10.1705 19 11.0807 19 12L19 12Z" stroke="white" stroke-width="2"/>
<path d="M21 21L18 18" stroke="white" stroke-width="2" stroke-linecap="round"/>
<line x1="12" y1="9" x2="12" y2="15" stroke="white" stroke-width="2" stroke-linecap="round"/>
<line x1="9" y1="12" x2="15" y2="12" stroke="white" stroke-width="2" stroke-linecap="round"/>
</g>
<defs>
<filter id="filter0_d_195_498" x="-3" y="-3" width="32" height="32" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset/>
<feGaussianBlur stdDeviation="2"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_195_498"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_195_498" result="shape"/>
</filter>
</defs>
</svg>
`}
              />
            </TouchableOpacity>
            <TouchableOpacity
              disabled={timer}
              onPress={() => {
                if (zoom != 0) setzoom(zoom - 1.5);
              }}
              style={styles.zoomout}
            >
              <SvgXml
                xml={`<svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_d_195_497)">
<path d="M19 12C19 12.9193 18.8189 13.8295 18.4672 14.6788C18.1154 15.5281 17.5998 16.2997 16.9497 16.9497C16.2997 17.5998 15.5281 18.1154 14.6788 18.4672C13.8295 18.8189 12.9193 19 12 19C11.0807 19 10.1705 18.8189 9.32122 18.4672C8.47194 18.1154 7.70026 17.5998 7.05025 16.9497C6.40024 16.2997 5.88463 15.5281 5.53284 14.6788C5.18106 13.8295 5 12.9193 5 12C5 11.0807 5.18106 10.1705 5.53284 9.32122C5.88463 8.47194 6.40024 7.70026 7.05025 7.05025C7.70026 6.40024 8.47194 5.88463 9.32122 5.53284C10.1705 5.18106 11.0807 5 12 5C12.9193 5 13.8295 5.18106 14.6788 5.53284C15.5281 5.88463 16.2997 6.40024 16.9497 7.05025C17.5998 7.70026 18.1154 8.47194 18.4672 9.32122C18.8189 10.1705 19 11.0807 19 12L19 12Z" stroke="white" stroke-width="2"/>
<path d="M21 21L18 18" stroke="white" stroke-width="2" stroke-linecap="round"/>
<line x1="9" y1="12" x2="15" y2="12" stroke="white" stroke-width="2" stroke-linecap="round"/>
</g>
<defs>
<filter id="filter0_d_195_497" x="-3" y="-3" width="32" height="32" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset/>
<feGaussianBlur stdDeviation="2"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_195_497"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_195_497" result="shape"/>
</filter>
</defs>
</svg>
`}
              />
            </TouchableOpacity>
            <Button
              onPress={takePhoto}
              containerStyle={{
                height: width(20),
                width: width(20),
                backgroundColor: "white",
                borderRadius: width(20),
              }}
            />
          </View>

          <View
            style={{
              height: height(10),
              position: "absolute",
              zIndex: -0.5,
              width: width(100),

              bottom: 0,
            }}
          >
            <SvgXml
              xml={`<svg width="376" height="72" viewBox="28 17 376 52" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M108.78 0L0 0V72H376V0L267.22 0C255.689 32.6254 224.574 56 188 56C151.426 56 120.311 32.6254 108.78 0Z" fill="black" fill-opacity="0.2"/>
</svg>
`}
            />
            <TouchableOpacity
              disabled={timer && isrecording}
              onPress={() => {
                getPhotos();
              }}
              style={styles.gallery}
            >
              <SvgXml
                xml={`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_195_572)">
<g filter="url(#filter0_d_195_572)">
<path fill-rule="evenodd" clip-rule="evenodd" d="M3.17157 3.17419C2 4.34576 2 6.23138 2 10.0026V14.0026C2 17.7739 2 19.6595 3.17157 20.831C4.34315 22.0026 6.22876 22.0026 10 22.0026H14C17.7712 22.0026 19.6569 22.0026 20.8284 20.831C22 19.6595 22 17.7739 22 14.0026V14.0026V10.0026C22 7.16328 22 5.3928 21.5 4.19118V17.0026C20.5396 17.0026 19.6185 16.6211 18.9393 15.942L18.1877 15.1903C17.4664 14.469 17.1057 14.1083 16.6968 13.9563C16.2473 13.7893 15.7527 13.7893 15.3032 13.9563C14.8943 14.1083 14.5336 14.469 13.8123 15.1903L13.6992 15.3034C13.1138 15.8888 12.8212 16.1815 12.5102 16.236C12.2685 16.2785 12.0197 16.2305 11.811 16.1014C11.5425 15.9352 11.3795 15.5548 11.0534 14.7939L11 14.6693C10.2504 12.9201 9.87554 12.0455 9.22167 11.7178C8.89249 11.5527 8.52413 11.4818 8.1572 11.5128C7.42836 11.5743 6.75554 12.2471 5.40989 13.5927L3.5 15.5026V2.89001C3.3844 2.97612 3.27519 3.07057 3.17157 3.17419Z" fill="white"/>
</g>
<g filter="url(#filter1_d_195_572)">
<path d="M3 10C3 8.08611 3.00212 6.75129 3.13753 5.74416C3.26907 4.76579 3.50966 4.2477 3.87868 3.87868C4.2477 3.50966 4.76579 3.26907 5.74416 3.13753C6.75129 3.00212 8.08611 3 10 3H14C15.9139 3 17.2487 3.00212 18.2558 3.13753C19.2342 3.26907 19.7523 3.50966 20.1213 3.87868C20.4903 4.2477 20.7309 4.76579 20.8625 5.74416C20.9979 6.75129 21 8.08611 21 10V14C21 15.9139 20.9979 17.2487 20.8625 18.2558C20.7309 19.2342 20.4903 19.7523 20.1213 20.1213C19.7523 20.4903 19.2342 20.7309 18.2558 20.8625C17.2487 20.9979 15.9139 21 14 21H10C8.08611 21 6.75129 20.9979 5.74416 20.8625C4.76579 20.7309 4.2477 20.4903 3.87868 20.1213C3.50966 19.7523 3.26907 19.2342 3.13753 18.2558C3.00212 17.2487 3 15.9139 3 14V10Z" stroke="white" stroke-width="2" shape-rendering="crispEdges"/>
</g>
<g filter="url(#filter2_d_195_572)">
<circle cx="15" cy="9" r="2" fill="white"/>
</g>
</g>
<defs>
<filter id="filter0_d_195_572" x="-2" y="-1.10999" width="28" height="27.1126" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset/>
<feGaussianBlur stdDeviation="2"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_195_572"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_195_572" result="shape"/>
</filter>
<filter id="filter1_d_195_572" x="-2" y="-2" width="28" height="28" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset/>
<feGaussianBlur stdDeviation="2"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_195_572"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_195_572" result="shape"/>
</filter>
<filter id="filter2_d_195_572" x="9" y="3" width="12" height="12" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset/>
<feGaussianBlur stdDeviation="2"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_195_572"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_195_572" result="shape"/>
</filter>
<clipPath id="clip0_195_572">
<rect width="24" height="24" fill="white"/>
</clipPath>
</defs>
</svg>
`}
              />
            </TouchableOpacity>
            <TouchableOpacity
              disabled={timer}
              onPress={async () => {
                if (isrecording) {
                  setisrecording(false);
                  await camera.current.stopRecording();
                } else {
                  setisrecording(true);
                  takeVideo();
                }
              }}
              style={styles.video}
            >
              {isrecording ? (
                <SvgXml
                  xml={`<svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_d_307_270)">
<path d="M4 12C4 8.22876 4 6.34315 5.17157 5.17157C6.34315 4 8.22876 4 12 4H14C17.7712 4 19.6569 4 20.8284 5.17157C22 6.34315 22 8.22876 22 12V14C22 17.7712 22 19.6569 20.8284 20.8284C19.6569 22 17.7712 22 14 22H12C8.22876 22 6.34315 22 5.17157 20.8284C4 19.6569 4 17.7712 4 14V12Z" fill="white"/>
</g>
<defs>
<filter id="filter0_d_307_270" x="-3" y="-3" width="32" height="32" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset/>
<feGaussianBlur stdDeviation="2"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_307_270"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_307_270" result="shape"/>
</filter>
</defs>
</svg>
`}
                />
              ) : (
                <SvgXml
                  xml={`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_195_571)">
<g filter="url(#filter0_d_195_571)">
<path fill-rule="evenodd" clip-rule="evenodd" d="M14.2313 11.1752C13.6429 11.5716 13.6429 12.4376 14.2313 12.834L16 14.0253V9.98387L14.2313 11.1752ZM18 8.63672V15.3725L20.4414 17.0169C21.1056 17.4643 22 16.9884 22 16.1875V7.8217C22 7.02084 21.1056 6.5449 20.4414 6.99231L18 8.63672Z" fill="white"/>
</g>
<g filter="url(#filter1_d_195_571)">
<rect x="2" y="6" width="14" height="12" rx="2" fill="white"/>
</g>
</g>
<defs>
<filter id="filter0_d_195_571" x="9.79001" y="2.82001" width="16.21" height="18.3692" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset/>
<feGaussianBlur stdDeviation="2"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_195_571"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_195_571" result="shape"/>
</filter>
<filter id="filter1_d_195_571" x="-2" y="2" width="22" height="20" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset/>
<feGaussianBlur stdDeviation="2"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_195_571"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_195_571" result="shape"/>
</filter>
<clipPath id="clip0_195_571">
<rect width="24" height="24" fill="white"/>
</clipPath>
</defs>
</svg>
`}
                />
              )}
            </TouchableOpacity>
            <TouchableOpacity
              style={{
                height: width(16.5),
                alignItems: "center",
                justifyContent: "center",
                borderWidth: 1,

                borderColor: "#00000030",

                width: width(18),
                borderRadius: width(20),
                position: "absolute",
                top: height(0.1),
                right: -width(9),
                elevation: 40,
              }}
              disabled={timer && isrecording}
              onPress={() => {
                showBox(!box);
              }}
            >
              <SvgXml
                style={{ marginLeft: -width(8), marginTop: -height(0.6) }}
                xml={`<svg width="12" height="24" viewBox="0 0 12 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_d_30_57)">
<circle cx="6" cy="12" r="2" fill="white"/>
</g>
<g filter="url(#filter1_d_30_57)">
<circle cx="6" cy="19" r="2" fill="white"/>
</g>
<g filter="url(#filter2_d_30_57)">
<circle cx="6" cy="5" r="2" fill="white"/>
</g>
<defs>
<filter id="filter0_d_30_57" x="0" y="6" width="12" height="12" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset/>
<feGaussianBlur stdDeviation="2"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_30_57"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_30_57" result="shape"/>
</filter>
<filter id="filter1_d_30_57" x="0" y="13" width="12" height="12" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset/>
<feGaussianBlur stdDeviation="2"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_30_57"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_30_57" result="shape"/>
</filter>
<filter id="filter2_d_30_57" x="0" y="-1" width="12" height="12" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset/>
<feGaussianBlur stdDeviation="2"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_30_57"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_30_57" result="shape"/>
</filter>
</defs>
</svg>
`}
              />
            </TouchableOpacity>
          </View>
        </View>
        <ReactNativeModal
          animationInTiming={300}
          animationOutTiming={200}
          animationIn={"lightSpeedIn"}
          animationOut={"lightSpeedOut"}
          isVisible={modal}
          onBackButtonPress={() => {
            setphotos([]);
            setmodal(false);
            savePhoto;
          }}
          onBackdropPress={() => {
            setmodal(false);
          }}
          backdropOpacity={0.4}
          coverScreen
          style={{ backgroundColor: "white" }}
        >
          {photos?.length > 0 ? (
            <View style={styles.container}>
              <Image
                source={{ uri:image }}
                resizeMode="cover"
                style={{ height: height(100), width: width(100), zIndex: 1 }}
              />
            </View>
          ) : (
            <View style={styles.container}>
              <Image
                source={{ uri: `file://+${image}` }}
                resizeMode="cover"
                style={{ height: height(100), width: width(100), zIndex: 1 }}
              />
              {preview ? null : (
                <View
                  style={{
                    height: height(14),
                    position: "absolute",
                    flexDirection: "row",
                    justifyContent: "space-between",
                    paddingHorizontal: width(14),
                    alignItems: "center",
                    paddingBottom: height(2),
                    zIndex: 100000,
                    width: width(100),
                    backgroundColor: "#00000020",
                    bottom: 0,
                  }}
                >
                  <TouchableOpacity
                    onPress={savePhoto}
                    style={[styles.more, { marginTop: height(0.4) }]}
                  >
                    <SvgXml
                      xml={`<svg width="24" height="28" viewBox="0 0 24 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_d_237_258)">
<path d="M16.7474 5.66436C17.1143 5.25158 17.0771 4.61951 16.6644 4.25259C16.2516 3.88567 15.6195 3.92285 15.2526 4.33564L16.7474 5.66436ZM8.59055 13.3356L7.84314 12.6713L7.84314 12.6713L8.59055 13.3356ZM8.59055 14.6644L7.84314 15.3287H7.84314L8.59055 14.6644ZM15.2526 23.6644C15.6195 24.0771 16.2516 24.1143 16.6644 23.7474C17.0771 23.3805 17.1143 22.7484 16.7474 22.3356L15.2526 23.6644ZM15.2526 4.33564L7.84314 12.6713L9.33795 14L16.7474 5.66436L15.2526 4.33564ZM7.84314 15.3287L15.2526 23.6644L16.7474 22.3356L9.33795 14L7.84314 15.3287ZM7.84314 12.6713C7.16956 13.429 7.16956 14.571 7.84314 15.3287L9.33796 14L7.84314 12.6713Z" fill="white"/>
</g>
<defs>
<filter id="filter0_d_237_258" x="-4" y="-2" width="32" height="32" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset/>
<feGaussianBlur stdDeviation="2"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_237_258"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_237_258" result="shape"/>
</filter>
</defs>
</svg>
`}
                    />
                  </TouchableOpacity>
                  <TouchableOpacity
                    onPress={() => {
                      setmodal(false);
                    }}
                    style={{ flexDirection: "row", alignItems: "center" }}
                  >
                    <SvgXml
                      xml={`<svg width="26" height="24" viewBox="0 0 26 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_d_237_253)">
<path d="M5 9C5 7.11438 5 6.17157 5.58579 5.58579C6.17157 5 7.11438 5 9 5H9.34315C10.1606 5 10.5694 5 10.9369 5.15224C11.3045 5.30448 11.5935 5.59351 12.1716 6.17157L12.8284 6.82843C13.4065 7.40649 13.6955 7.69552 14.0631 7.84776C14.4306 8 14.8394 8 15.6569 8H17C18.8856 8 19.8284 8 20.4142 8.58579C21 9.17157 21 10.1144 21 12V15C21 16.8856 21 17.8284 20.4142 18.4142C19.8284 19 18.8856 19 17 19H9C7.11438 19 6.17157 19 5.58579 18.4142C5 17.8284 5 16.8856 5 15V9Z" stroke="white" stroke-width="2"/>
</g>
<defs>
<filter id="filter0_d_237_253" x="-3" y="-4" width="32" height="32" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset/>
<feGaussianBlur stdDeviation="2"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_237_253"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_237_253" result="shape"/>
</filter>
</defs>
</svg>
`}
                    />
                    <Text
                      style={{
                        fontSize: 15,
                        color: "white",
                        marginLeft: width(1),
                      }}
                    >
                      Delete
                    </Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    onPress={async () => {
                      try {
                        const result = await Share.share({
                          title: `Image`,
                          message: `file://+${image}`, //string
                        });
                        if (result.action === Share.sharedAction) {
                          if (result.activityType) {
                            // shared with activity type of result.activityType
                          } else {
                            // shared
                          }
                        } else if (result.action === Share.dismissedAction) {
                          // dismissed
                        }
                      } catch (error) {
                        alert(error.message);
                      }
                    }}
                    style={{ flexDirection: "row", alignItems: "center" }}
                  >
                    <SvgXml
                      xml={`<svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_d_237_252)">
<path d="M15 8V8C15 7.06812 15 6.60218 14.8478 6.23463C14.6448 5.74458 14.2554 5.35523 13.7654 5.15224C13.3978 5 12.9319 5 12 5H9C7.11438 5 6.17157 5 5.58579 5.58579C5 6.17157 5 7.11438 5 9V12C5 12.9319 5 13.3978 5.15224 13.7654C5.35523 14.2554 5.74458 14.6448 6.23463 14.8478C6.60218 15 7.06812 15 8 15V15" stroke="white" stroke-width="2"/>
<rect x="11" y="11" width="10" height="10" rx="2" stroke="white" stroke-width="2"/>
</g>
<defs>
<filter id="filter0_d_237_252" x="-3" y="-3" width="32" height="32" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset/>
<feGaussianBlur stdDeviation="2"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_237_252"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_237_252" result="shape"/>
</filter>
</defs>
</svg>
`}
                    />
                    <Text
                      style={{
                        fontSize: 15,
                        color: "white",
                        marginLeft: width(1),
                      }}
                    >
                      Share
                    </Text>
                  </TouchableOpacity>
                </View>
              )}
            </View>
          )}
        </ReactNativeModal>
      </ScreenWrapper>
    </>
  );
}
